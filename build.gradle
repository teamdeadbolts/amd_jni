/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id "java"
    id 'edu.wpi.first.WpilibTools' version '1.3.0'
    id "com.diffplug.spotless" version "6.22.0"
    id "edu.wpi.first.GradleRIO" version "2024.1.1"
}

allprojects {
  repositories {
      // Use Maven Central for resolving dependencies.
      mavenCentral()
  }
}

ext {
  // pubVersion = versionString
  // isDev = pubVersion.startsWith("dev")

  wpilibVersion = "2024.3.2"
  wpimathVersion = wpilibVersion
  openCVversion = "4.8.0-2"
}


wpi.getVersions().getOpencvVersion().convention(openCVversion);
wpi.getVersions().getWpilibVersion().convention(wpilibVersion);
wpi.getVersions().getWpimathVersion().convention(wpimathVersion);
wpilibTools.deps.wpilibVersion = wpilibVersion

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21

  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

dependencies {
    implementation wpilibTools.deps.wpilibJava("wpiutil")
    implementation wpilibTools.deps.wpilibOpenCvJava("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    systemProperty "java.library.path", "$buildDir/outputs/nativelibraries/$nativeName"
}

ext.nativeName = wpilibTools.platformMapper.currentPlatform.platformName;

ext.outputsFolder = file("$buildDir/outputs");

println("Building for platform $nativeName");

tasks.register('copyNative', Copy) {
  from "$projectDir/cmake_build"
  into "$outputsFolder/nativelibraries/$nativeName"
  include "*.so"

  eachFile {
    println("Copying native library: $name");
    path = name;
  }
  includeEmptyDirs = false
  build.dependsOn it
}

tasks.register("generateJniHeaders", JavaCompile) {
    group = "build"
    description = "Generates JNI headers for AmdJNI"

    source = fileTree("src/main/java") {
        include "org/teamdeadbolts/amd/AmdJNI.java"
    }

    classpath = sourceSets.main.compileClasspath
    destinationDirectory = file("$buildDir/classes/java/main")
    options.compilerArgs = [
        "-h", "$projectDir/src/main/native/include"
    ]
}

def nativeConfigName = "wpilibNatives"
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
  configurationName = nativeConfigName
}
